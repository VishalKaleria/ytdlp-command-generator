import { Command } from "@/lib/types"

export type CommandCategory = Record<string, Command[]>

export const commandData: CommandCategory = {
  general: [
    {
      id: "help",
      name: "Print help text",
      flag: "--help",
      type: "boolean",
      description: "Print this help text and exit",
      requiresUrl: false,
      utilityOnly: true,
    },
    {
      id: "version",
      name: "Print program version",
      flag: "--version",
      type: "boolean",
      description: "Print program version and exit",
      requiresUrl: false,
      utilityOnly: true,
    },
    {
      id: "update",
      name: "Update to latest version",
      flag: "--update",
      type: "boolean",
      description: "Update this program to the latest version",
      requiresUrl: false,
      utilityOnly: true,
    },
    {
      id: "ignore-errors",
      name: "Ignore errors",
      flag: "--ignore-errors",
      type: "boolean",
      description: "Continue on download errors",
      incompatibleWith: ["abort-on-error"],
    },
    {
      id: "abort-on-error",
      name: "Abort on error",
      flag: "--abort-on-error",
      type: "boolean",
      description: "Abort downloading of further videos if an error occurs",
      incompatibleWith: ["ignore-errors"],
    },
    {
      id: "dump-user-agent",
      name: "Display user agent",
      flag: "--dump-user-agent",
      type: "boolean",
      description: "Display the current user-agent and exit",
      requiresUrl: false,
      infoCommand: true,
    },
    {
      id: "list-extractors",
      name: "List all extractors",
      flag: "--list-extractors",
      type: "boolean",
      description: "List all supported extractors and exit",
      requiresUrl: false,
      infoCommand: true,
    },
    {
      id: "extractor-descriptions",
      name: "Output extractor descriptions",
      flag: "--extractor-descriptions",
      type: "boolean",
      description: "Output descriptions of all supported extractors and exit",
      requiresUrl: false,
      infoCommand: true,
    },
    {
      id: "force-generic-extractor",
      name: "Force generic extractor",
      flag: "--force-generic-extractor",
      type: "boolean",
      description: "Force extraction to use the generic extractor",
    },
    {
      id: "default-search",
      name: "Default search prefix",
      flag: "--default-search",
      type: "string",
      description: "Use this prefix for unqualified URLs",
      placeholder: "PREFIX",
      example: "ytsearch",
    },
    {
      id: "ignore-config",
      name: "Ignore configuration files",
      flag: "--ignore-config",
      type: "boolean",
      description: "Don't load any configuration files",
      requiresUrl: false,
    },
    {
      id: "config-location",
      name: "Configuration file path",
      flag: "--config-location",
      type: "string",
      description: "Location of the configuration file",
      placeholder: "PATH",
      example: "~/.config/yt-dlp.conf",
      requiresUrl: false,
    },
    {
      id: "flat-playlist",
      name: "Do not extract playlist videos",
      flag: "--flat-playlist",
      type: "boolean",
      description: "Do not extract the videos of a playlist, only list them",
      incompatibleWith: ["no-flat-playlist"],
    },
    {
      id: "no-flat-playlist",
      name: "Extract playlist videos",
      flag: "--no-flat-playlist",
      type: "boolean",
      description: "Extract the videos of a playlist",
      incompatibleWith: ["flat-playlist"],
    },
    {
      id: "mark-watched",
      name: "Mark videos as watched",
      flag: "--mark-watched",
      type: "boolean",
      description: "Mark videos as watched (YouTube only)",
      incompatibleWith: ["no-mark-watched"],
    },
    {
      id: "no-mark-watched",
      name: "Do not mark as watched",
      flag: "--no-mark-watched",
      type: "boolean",
      description: "Do not mark videos as watched",
      incompatibleWith: ["mark-watched"],
    },
    {
      id: "no-colors",
      name: "Disable colored output",
      flag: "--no-colors",
      type: "boolean",
      description: "Do not emit color codes in output",
      requiresUrl: false,
    },
    {
      id: "no-update",
      name: "Do not check for updates",
      flag: "--no-update",
      type: "boolean",
      description: "Do not check for updates (default)",
      requiresUrl: false,
      utilityOnly: true,
    },
    {
      id: "update-to",
      name: "Upgrade/downgrade to specific version",
      flag: "--update-to",
      type: "string",
      description: "Upgrade/downgrade to a specific version. CHANNEL can be a repository as well",
      placeholder: "[CHANNEL]@[TAG]",
      requiresUrl: false,
      utilityOnly: true,
    },
    {
      id: "use-extractors",
      name: "Extractor names to use",
      flag: "--use-extractors",
      type: "string",
      description: "Extractor names to use separated by commas. You can also use regexes",
      placeholder: "NAMES",
      example: "holodex.*,end,youtube",
      requiresUrl: false,
    },
    {
      id: "live-from-start",
      name: "Download livestreams from start",
      flag: "--live-from-start",
      type: "boolean",
      description: "Download livestreams from the start. Currently only supported for YouTube (Experimental)",
      incompatibleWith: ["no-live-from-start"],
    },
    {
      id: "no-live-from-start",
      name: "Download livestreams from current time",
      flag: "--no-live-from-start",
      type: "boolean",
      description: "Download livestreams from the current time (default)",
      incompatibleWith: ["live-from-start"],
    },
    {
      id: "wait-for-video",
      name: "Wait for scheduled streams",
      flag: "--wait-for-video",
      type: "string",
      description: "Wait for scheduled streams to become available",
      placeholder: "MIN[-MAX]",
      example: "60-120",
    },
    {
      id: "no-wait-for-video",
      name: "Do not wait for scheduled streams",
      flag: "--no-wait-for-video",
      type: "boolean",
      description: "Do not wait for scheduled streams (default)",
      incompatibleWith: ["wait-for-video"],
    },
    {
      id: "color",
      name: "Color output policy",
      flag: "--color",
      type: "string",
      description: "Whether to emit color codes in output",
      placeholder: "[STREAM:]POLICY",
      example: "auto",
    },
    {
      id: "compat-options",
      name: "Compatibility options",
      flag: "--compat-options",
      type: "string",
      description: "Options that can help keep compatibility with youtube-dl or youtube-dlc configurations",
      placeholder: "OPTS",
    },
    {
      id: "alias",
      name: "Create option aliases",
      flag: "--alias",
      type: "string",
      description: "Create aliases for an option string",
      placeholder: "ALIASES OPTIONS",
      example: "get-audio,-X \"-S=aext:{0},abr -x --audio-format {0}\"",
    },
    {
      id: "plugin-dirs",
      name: "Plugin directories",
      flag: "--plugin-dirs",
      type: "string",
      description: "Path to an additional directory to search for plugins",
      placeholder: "PATH",
      example: "default",
    },
    {
      id: "no-plugin-dirs",
      name: "Clear plugin directories",
      flag: "--no-plugin-dirs",
      type: "boolean",
      description: "Clear plugin directories to search, including defaults",
    },
  ],
  network: [
    {
      id: "proxy",
      name: "Use proxy",
      flag: "--proxy",
      type: "string",
      description: "Use the specified HTTP/HTTPS/SOCKS proxy",
      placeholder: "URL",
      example: "socks5://127.0.0.1:1080/",
    },
    {
      id: "socket-timeout",
      name: "Socket timeout",
      flag: "--socket-timeout",
      type: "number",
      description: "Time to wait before giving up on a socket connection",
      placeholder: "SECONDS",
      min: 1,
    },
    {
      id: "source-address",
      name: "Source IP address",
      flag: "--source-address",
      type: "string",
      description: "Client-side IP address to bind to",
      placeholder: "IP",
      example: "192.168.1.10",
    },
    {
      id: "force-ipv4",
      name: "Force IPv4",
      flag: "--force-ipv4",
      type: "boolean",
      description: "Make all connections via IPv4",
      incompatibleWith: ["force-ipv6"],
    },
    {
      id: "force-ipv6",
      name: "Force IPv6",
      flag: "--force-ipv6",
      type: "boolean",
      description: "Make all connections via IPv6",
      incompatibleWith: ["force-ipv4"],
    },
    {
      id: "geo-verification-proxy",
      name: "Geo verification proxy",
      flag: "--geo-verification-proxy",
      type: "string",
      description: "Use this proxy to verify the IP address for some geo-restricted sites",
      placeholder: "URL",
      example: "http://127.0.0.1:8080/",
    },
    {
      id: "geo-bypass",
      name: "Bypass geographic restriction",
      flag: "--geo-bypass",
      type: "boolean",
      description: "Bypass geographic restriction via faking X-Forwarded-For HTTP header",
      incompatibleWith: ["no-geo-bypass"],
    },
    {
      id: "no-geo-bypass",
      name: "Do not bypass geo restrictions",
      flag: "--no-geo-bypass",
      type: "boolean",
      description: "Do not bypass geographic restriction via faking X-Forwarded-For HTTP header",
      incompatibleWith: ["geo-bypass"],
    },
    {
      id: "geo-bypass-country",
      name: "Force country code for geo-bypass",
      flag: "--geo-bypass-country",
      type: "string",
      description: "Force this two-letter country code for geo-bypass",
      placeholder: "CODE",
      example: "US",
    },
    {
      id: "geo-bypass-ip-block",
      name: "Force IP block for geo-bypass",
      flag: "--geo-bypass-ip-block",
      type: "string",
      description: "Force this IP block in CIDR notation for geo-bypass",
      placeholder: "IP_BLOCK",
      example: "192.168.0.0/16",
    },
    {
      id: "user-agent",
      name: "User-Agent",
      flag: "--user-agent",
      type: "string",
      description: "Specify a custom user agent",
      placeholder: "UA",
      example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
    },
    {
      id: "referer",
      name: "Referer URL",
      flag: "--referer",
      type: "string",
      description: "Specify a custom referer, use if the video access is restricted to one domain",
      placeholder: "URL",
      example: "https://www.example.com/",
    },
    {
      id: "add-header",
      name: "Add HTTP header",
      flag: "--add-header",
      type: "string",
      description: "Specify a custom HTTP header",
      placeholder: "FIELD:VALUE",
      example: "Accept-Language:en-US,en;q=0.9",
    },
    {
      id: "sleep-interval",
      name: "Sleep interval between requests",
      flag: "--sleep-interval",
      type: "number",
      description: "Number of seconds to sleep before each download",
      placeholder: "SECONDS",
      min: 0,
    },
    {
      id: "max-sleep-interval",
      name: "Maximum sleep interval",
      flag: "--max-sleep-interval",
      type: "number",
      description: "Maximum number of seconds to sleep",
      placeholder: "SECONDS",
      min: 0,
    },
    {
      id: "impersonate",
      name: "Impersonate client",
      flag: "--impersonate",
      type: "string",
      description: "Client to impersonate for requests",
      placeholder: "CLIENT[:OS]",
      example: "chrome:windows-10",
    },
    {
      id: "list-impersonate-targets",
      name: "List impersonate targets",
      flag: "--list-impersonate-targets",
      type: "boolean",
      description: "List available clients to impersonate",
      requiresUrl: false,
      infoCommand: true,
    },
    {
      id: "enable-file-urls",
      name: "Enable file:// URLs",
      flag: "--enable-file-urls",
      type: "boolean",
      description: "Enable file:// URLs. This is disabled by default for security reasons",
    },
    {
      id: "xff",
      name: "Fake X-Forwarded-For header",
      flag: "--xff",
      type: "string",
      description: "How to fake X-Forwarded-For HTTP header to try bypassing geographic restriction",
      placeholder: "VALUE",
      example: "default",
    },
  ],
  video: [
    {
      id: "format",
      name: "Video format code",
      flag: "--format",
      type: "string",
      description: 'Video format code, see the "FORMAT SELECTION" for all the info',
      placeholder: "FORMAT",
      example: "bestvideo+bestaudio/best",
    },
    {
      id: "format-best",
      name: "Best quality format",
      flag: "-f best",
      type: "boolean",
      description: "Select the best quality format",
    },
    {
      id: "all-formats",
      name: "Download all formats",
      flag: "--all-formats",
      type: "boolean",
      description: "Download all available video formats",
    },
    {
      id: "prefer-free-formats",
      name: "Prefer free formats",
      flag: "--prefer-free-formats",
      type: "boolean",
      description: "Prefer video formats with free codecs",
    },
    {
      id: "list-formats",
      name: "List available formats",
      flag: "--list-formats",
      type: "boolean",
      description: "List all available formats of requested videos",
      infoCommand: true,
    },
    {
      id: "merge-output-format",
      name: "Merge output format",
      flag: "--merge-output-format",
      type: "select",
      description: "If a merge is required, output to this format",
      options: [
        { label: "MP4", value: "mp4" },
        { label: "MKV", value: "mkv" },
        { label: "OGG", value: "ogg" },
        { label: "WEBM", value: "webm" },
        { label: "FLV", value: "flv" },
      ],
    },
    {
      id: "resolution",
      name: "Video resolution",
      flag: "--resolution",
      type: "string",
      description: "Filter videos by resolution",
      placeholder: "RESOLUTION",
      example: "1080",
    },
    {
      id: "video-format",
      name: "Video format",
      flag: "--video-format",
      type: "select",
      description: "Specify the video format",
      options: [
        { label: "MP4", value: "mp4" },
        { label: "FLV", value: "flv" },
        { label: "OGG", value: "ogg" },
        { label: "WEBM", value: "webm" },
        { label: "MKV", value: "mkv" },
      ],
    },
    {
      id: "recode-video",
      name: "Recode video",
      flag: "--recode-video",
      type: "select",
      description: "Encode the video to another format if necessary",
      options: [
        { label: "MP4", value: "mp4" },
        { label: "FLV", value: "flv" },
        { label: "OGG", value: "ogg" },
        { label: "WEBM", value: "webm" },
        { label: "MKV", value: "mkv" },
      ],
    },
    {
      id: "remux-video",
      name: "Remux video",
      flag: "--remux-video",
      type: "select",
      description: "Remux the video into another container if necessary",
      options: [
        { label: "MP4", value: "mp4" },
        { label: "MKV", value: "mkv" },
        { label: "MOV", value: "mov" },
        { label: "FLV", value: "flv" },
        { label: "AVI", value: "avi" },
      ],
    },
    {
      id: "embed-subs",
      name: "Embed subtitles",
      flag: "--embed-subs",
      type: "boolean",
      description: "Embed subtitles in the video (only for mp4, webm and mkv videos)",
    },
    {
      id: "embed-thumbnail",
      name: "Embed thumbnail",
      flag: "--embed-thumbnail",
      type: "boolean",
      description: "Embed thumbnail in the video as cover art",
    },
    {
      id: "add-metadata",
      name: "Add metadata",
      flag: "--add-metadata",
      type: "boolean",
      description: "Write metadata to the video file",
    },
    {
      id: "write-thumbnail",
      name: "Write thumbnail",
      flag: "--write-thumbnail",
      type: "boolean",
      description: "Write thumbnail image to disk",
    },
    {
      id: "playlist-items",
      name: "Playlist items to download",
      flag: "--playlist-items",
      type: "string",
      description: "Comma separated playlist_index of the items to download",
      placeholder: "ITEM_SPEC",
      example: "1:3,7,-5::2",
    },
    {
      id: "min-filesize",
      name: "Minimum filesize",
      flag: "--min-filesize",
      type: "string",
      description: "Abort download if filesize is smaller than SIZE",
      placeholder: "SIZE",
      example: "50k",
    },
    {
      id: "max-filesize",
      name: "Maximum filesize",
      flag: "--max-filesize",
      type: "string",
      description: "Abort download if filesize is larger than SIZE",
      placeholder: "SIZE",
      example: "44.6M",
    },
    {
      id: "date",
      name: "Upload date",
      flag: "--date",
      type: "string",
      description: "Download only videos uploaded on this date",
      placeholder: "DATE",
      example: "today-2weeks",
    },
    {
      id: "datebefore",
      name: "Upload date before",
      flag: "--datebefore",
      type: "string",
      description: "Download only videos uploaded on or before this date",
      placeholder: "DATE",
      example: "20210101",
    },
    {
      id: "dateafter",
      name: "Upload date after",
      flag: "--dateafter",
      type: "string",
      description: "Download only videos uploaded on or after this date",
      placeholder: "DATE",
      example: "yesterday",
    },
    {
      id: "match-filters",
      name: "Match filters",
      flag: "--match-filters",
      type: "string",
      description: "Generic video filter. Any OUTPUT TEMPLATE field can be compared with a number or a string",
      placeholder: "FILTER",
      example: "like_count>?100 & description~='(?i)\\bcats & dogs\\b'",
    },
    {
      id: "no-match-filters",
      name: "No match filters",
      flag: "--no-match-filters",
      type: "boolean",
      description: "Do not use any --match-filters (default)",
    },
    {
      id: "break-match-filters",
      name: "Break match filters",
      flag: "--break-match-filters",
      type: "string",
      description: "Same as --match-filters but stops the download process when a video is rejected",
      placeholder: "FILTER",
    },
    {
      id: "no-break-match-filters",
      name: "No break match filters",
      flag: "--no-break-match-filters",
      type: "boolean",
      description: "Do not use any --break-match-filters (default)",
    },
    {
      id: "no-playlist",
      name: "Download only video",
      flag: "--no-playlist",
      type: "boolean",
      description: "Download only the video, if the URL refers to a video and a playlist",
      incompatibleWith: ["yes-playlist"],
    },
    {
      id: "yes-playlist",
      name: "Download playlist",
      flag: "--yes-playlist",
      type: "boolean",
      description: "Download the playlist, if the URL refers to a video and a playlist",
      incompatibleWith: ["no-playlist"],
    },
    {
      id: "age-limit",
      name: "Age limit",
      flag: "--age-limit",
      type: "number",
      description: "Download only videos suitable for the given age",
      placeholder: "YEARS",
      min: 0,
    },
    {
      id: "download-archive",
      name: "Download archive",
      flag: "--download-archive",
      type: "string",
      description: "Download only videos not listed in the archive file",
      placeholder: "FILE",
      example: "archive.txt",
    },
    {
      id: "no-download-archive",
      name: "No download archive",
      flag: "--no-download-archive",
      type: "boolean",
      description: "Do not use archive file (default)",
    },
    {
      id: "max-downloads",
      name: "Max downloads",
      flag: "--max-downloads",
      type: "number",
      description: "Abort after downloading NUMBER files",
      placeholder: "NUMBER",
      min: 1,
    },
    {
      id: "break-on-existing",
      name: "Break on existing",
      flag: "--break-on-existing",
      type: "boolean",
      description: "Stop the download process when encountering a file that is in the archive",
      incompatibleWith: ["no-break-on-existing"],
    },
    {
      id: "no-break-on-existing",
      name: "No break on existing",
      flag: "--no-break-on-existing",
      type: "boolean",
      description: "Do not stop the download process when encountering a file that is in the archive (default)",
      incompatibleWith: ["break-on-existing"],
    },
    {
      id: "break-per-input",
      name: "Break per input",
      flag: "--break-per-input",
      type: "boolean",
      description: "Alters --max-downloads, --break-on-existing, --break-match-filters to reset per input URL",
      incompatibleWith: ["no-break-per-input"],
    },
    {
      id: "no-break-per-input",
      name: "No break per input",
      flag: "--no-break-per-input",
      type: "boolean",
      description: "--break-on-existing and similar options terminates the entire download queue",
      incompatibleWith: ["break-per-input"],
    },
    {
      id: "skip-playlist-after-errors",
      name: "Skip playlist after errors",
      flag: "--skip-playlist-after-errors",
      type: "number",
      description: "Number of allowed failures until the rest of the playlist is skipped",
      placeholder: "N",
      min: 1,
    },
  ],
  audio: [
    {
      id: "extract-audio",
      name: "Extract audio",
      flag: "--extract-audio",
      type: "boolean",
      description: "Convert video files to audio-only files",
    },
    {
      id: "audio-format",
      name: "Audio format",
      flag: "--audio-format",
      type: "select",
      description: "Specify audio format",
      options: [
        { label: "MP3", value: "mp3" },
        { label: "AAC", value: "aac" },
        { label: "FLAC", value: "flac" },
        { label: "M4A", value: "m4a" },
        { label: "OPUS", value: "opus" },
        { label: "VORBIS", value: "vorbis" },
        { label: "WAV", value: "wav" },
      ],
    },
    {
      id: "audio-quality",
      name: "Audio quality",
      flag: "--audio-quality",
      type: "string",
      description:
        "Specify ffmpeg audio quality (insert a value between 0 (best) and 9 (worst) for VBR or a specific bitrate)",
      placeholder: "QUALITY",
      example: "0",
    },
    {
      id: "remux-audio",
      name: "Remux audio",
      flag: "--remux-audio",
      type: "select",
      description: "Remux the audio into another container if necessary",
      options: [
        { label: "MP3", value: "mp3" },
        { label: "M4A", value: "m4a" },
        { label: "WEBM", value: "webm" },
        { label: "MKV", value: "mkv" },
      ],
    },
    {
      id: "no-prefer-free-formats",
      name: "No prefer free formats",
      flag: "--no-prefer-free-formats",
      type: "boolean",
      description: "Don't give any special preference to free containers (default)",
      incompatibleWith: ["prefer-free-formats"],
    },
    {
      id: "check-formats",
      name: "Check formats",
      flag: "--check-formats",
      type: "boolean",
      description: "Make sure formats are selected only from those that are actually downloadable",
      incompatibleWith: ["no-check-formats"],
    },
    {
      id: "check-all-formats",
      name: "Check all formats",
      flag: "--check-all-formats",
      type: "boolean",
      description: "Check all formats for whether they are actually downloadable",
    },
    {
      id: "no-check-formats",
      name: "No check formats",
      flag: "--no-check-formats",
      type: "boolean",
      description: "Do not check that the formats are actually downloadable",
      incompatibleWith: ["check-formats", "check-all-formats"],
    },
  ],
  subtitle: [
    {
      id: "write-sub",
      name: "Write subtitle file",
      flag: "--write-sub",
      type: "boolean",
      description: "Write subtitle file",
    },
    {
      id: "write-auto-sub",
      name: "Write auto-generated subtitle file",
      flag: "--write-auto-sub",
      type: "boolean",
      description: "Write automatically generated subtitle file (YouTube only)",
    },
    {
      id: "all-subs",
      name: "Download all subtitles",
      flag: "--all-subs",
      type: "boolean",
      description: "Download all the available subtitles of the video",
    },
    {
      id: "list-subs",
      name: "List available subtitles",
      flag: "--list-subs",
      type: "boolean",
      description: "List all available subtitles for the video",
      infoCommand: true,
    },
    {
      id: "sub-format",
      name: "Subtitle format",
      flag: "--sub-format",
      type: "select",
      description: "Subtitle format, accepts formats preference",
      options: [
        { label: "SRT", value: "srt" },
        { label: "VTT", value: "vtt" },
        { label: "ASS", value: "ass" },
        { label: "LRC", value: "lrc" },
      ],
    },
    {
      id: "sub-langs",
      name: "Subtitle languages",
      flag: "--sub-langs",
      type: "string",
      description: "Languages of the subtitles to download (comma-separated)",
      placeholder: "LANGS",
      example: "en,fr,es",
    },
    {
      id: "no-write-subs",
      name: "No write subtitles",
      flag: "--no-write-subs",
      type: "boolean",
      description: "Do not write subtitle file (default)",
      incompatibleWith: ["write-subs"],
    },
    {
      id: "no-write-auto-subs",
      name: "No write auto subtitles",
      flag: "--no-write-auto-subs",
      type: "boolean",
      description: "Do not write auto-generated subtitles (default)",
      incompatibleWith: ["write-auto-subs"],
    },
  ],
  download: [
    {
      id: "limit-rate",
      name: "Download speed limit",
      flag: "--limit-rate",
      type: "string",
      description: "Maximum download rate in bytes per second",
      placeholder: "RATE",
      example: "50K",
    },
    {
      id: "retries",
      name: "Retry attempts",
      flag: "--retries",
      type: "number",
      description: 'Number of retries (default is 10), or "infinite"',
      placeholder: "RETRIES",
      min: 0,
    },
    {
      id: "fragment-retries",
      name: "Fragment retry attempts",
      flag: "--fragment-retries",
      type: "number",
      description: 'Number of retries for a fragment (default is 10), or "infinite"',
      placeholder: "RETRIES",
      min: 0,
    },
    {
      id: "skip-unavailable-fragments",
      name: "Skip unavailable fragments",
      flag: "--skip-unavailable-fragments",
      type: "boolean",
      description: "Skip unavailable fragments (default)",
      incompatibleWith: ["abort-on-unavailable-fragment"],
    },
    {
      id: "abort-on-unavailable-fragment",
      name: "Abort on unavailable fragment",
      flag: "--abort-on-unavailable-fragment",
      type: "boolean",
      description: "Abort downloading when a fragment is unavailable",
      incompatibleWith: ["skip-unavailable-fragments"],
    },
    {
      id: "keep-fragments",
      name: "Keep downloaded fragments",
      flag: "--keep-fragments",
      type: "boolean",
      description: "Keep downloaded fragments on disk after downloading is finished",
    },
    {
      id: "buffer-size",
      name: "Buffer size",
      flag: "--buffer-size",
      type: "string",
      description: "Size of download buffer",
      placeholder: "SIZE",
      example: "1024",
    },
    {
      id: "no-resize-buffer",
      name: "Do not resize buffer",
      flag: "--no-resize-buffer",
      type: "boolean",
      description: "Do not automatically adjust the buffer size",
    },
    {
      id: "http-chunk-size",
      name: "HTTP chunk size",
      flag: "--http-chunk-size",
      type: "string",
      description: "Size of a chunk for chunk-based HTTP downloading",
      placeholder: "SIZE",
      example: "10485760",
    },
    {
      id: "playlist-reverse",
      name: "Download playlist in reverse order",
      flag: "--playlist-reverse",
      type: "boolean",
      description: "Download playlist videos in reverse order",
      incompatibleWith: ["playlist-random"],
    },
    {
      id: "playlist-random",
      name: "Download playlist in random order",
      flag: "--playlist-random",
      type: "boolean",
      description: "Download playlist videos in random order",
      incompatibleWith: ["playlist-reverse"],
    },
    {
      id: "xattr-set-filesize",
      name: "Set file size xattr",
      flag: "--xattr-set-filesize",
      type: "boolean",
      description: "Set file xattribute ytdl.filesize with expected file size",
    },
    {
      id: "hls-prefer-native",
      name: "Prefer native HLS downloader",
      flag: "--hls-prefer-native",
      type: "boolean",
      description: "Use the native HLS downloader instead of ffmpeg",
      incompatibleWith: ["hls-prefer-ffmpeg"],
    },
    {
      id: "hls-prefer-ffmpeg",
      name: "Prefer ffmpeg HLS downloader",
      flag: "--hls-prefer-ffmpeg",
      type: "boolean",
      description: "Use ffmpeg instead of the native HLS downloader",
      incompatibleWith: ["hls-prefer-native"],
    },
    {
      id: "external-downloader",
      name: "External downloader",
      flag: "--external-downloader",
      type: "select",
      description: "Use the specified external downloader",
      options: [
        { label: "aria2c", value: "aria2c" },
        { label: "avconv", value: "avconv" },
        { label: "axel", value: "axel" },
        { label: "curl", value: "curl" },
        { label: "ffmpeg", value: "ffmpeg" },
        { label: "httpie", value: "httpie" },
        { label: "wget", value: "wget" },
      ],
    },
    {
      id: "external-downloader-args",
      name: "External downloader arguments",
      flag: "--external-downloader-args",
      type: "string",
      description: "Give these arguments to the external downloader",
      placeholder: "ARGS",
      example: "aria2c:'-x 16 -k 1M'",
    },
    {
      id: "throttled-rate",
      name: "Throttled rate",
      flag: "--throttled-rate",
      type: "string",
      description: "Minimum download rate in bytes per second below which throttling is assumed",
      placeholder: "RATE",
      example: "100K",
    },
    {
      id: "file-access-retries",
      name: "File access retries",
      flag: "--file-access-retries",
      type: "string",
      description: "Number of times to retry on file access error (default is 3), or \"infinite\"",
      placeholder: "RETRIES",
    },
    {
      id: "retry-sleep",
      name: "Retry sleep",
      flag: "--retry-sleep",
      type: "string",
      description: "Time to sleep between retries in seconds",
      placeholder: "[TYPE:]EXPR",
      example: "linear=1::2",
    },
    {
      id: "no-keep-fragments",
      name: "Do not keep fragments",
      flag: "--no-keep-fragments",
      type: "boolean",
      description: "Delete downloaded fragments after downloading is finished (default)",
      incompatibleWith: ["keep-fragments"],
    },
    {
      id: "resize-buffer",
      name: "Resize buffer",
      flag: "--resize-buffer",
      type: "boolean",
      description: "The buffer size is automatically resized from an initial value of --buffer-size (default)",
      incompatibleWith: ["no-resize-buffer"],
    },
    {
      id: "lazy-playlist",
      name: "Lazy playlist",
      flag: "--lazy-playlist",
      type: "boolean",
      description: "Process entries in the playlist as they are received",
      incompatibleWith: ["no-lazy-playlist"],
    },
    {
      id: "no-lazy-playlist",
      name: "No lazy playlist",
      flag: "--no-lazy-playlist",
      type: "boolean",
      description: "Process videos in the playlist only after the entire playlist is parsed (default)",
      incompatibleWith: ["lazy-playlist"],
    },
    {
      id: "hls-use-mpegts",
      name: "HLS use MPEG-TS",
      flag: "--hls-use-mpegts",
      type: "boolean",
      description: "Use the mpegts container for HLS videos",
      incompatibleWith: ["no-hls-use-mpegts"],
    },
    {
      id: "no-hls-use-mpegts",
      name: "No HLS MPEG-TS",
      flag: "--no-hls-use-mpegts",
      type: "boolean",
      description: "Do not use the mpegts container for HLS videos. This is default when not downloading live streams",
      incompatibleWith: ["hls-use-mpegts"],
    },
    {
      id: "download-sections",
      name: "Download sections",
      flag: "--download-sections",
      type: "string",
      description: "Download only chapters that match the regular expression",
      placeholder: "REGEX",
      example: "*10:15-inf",
    },
    {
      id: "downloader",
      name: "Downloader",
      flag: "--downloader",
      type: "string",
      description: "Name or path of the external downloader to use",
      placeholder: "[PROTO:]NAME",
      example: "aria2c",
    },
    {
      id: "downloader-args",
      name: "Downloader arguments",
      flag: "--downloader-args",
      type: "string",
      description: "Give these arguments to the external downloader",
      placeholder: "NAME:ARGS",
      example: "aria2c:-x 16 -k 1M",
    },
  ],
  filesystem: [
    {
      id: "output",
      name: "Output filename template",
      flag: "-o",
      type: "string",
      description: 'Output filename template, see the "OUTPUT TEMPLATE" for all the info',
      placeholder: "TEMPLATE",
      example: "%(title)s-[%(id)s]",
    },
    {
      id: "output-na-placeholder",
      name: "Output NA placeholder",
      flag: "--output-na-placeholder",
      type: "string",
      description: "Placeholder for unavailable meta fields in output filename template",
      placeholder: "TEXT",
      example: "NA",
    },
    {
      id: "restrict-filenames",
      name: "Restrict filenames",
      flag: "--restrict-filenames",
      type: "boolean",
      description: 'Restrict filenames to only ASCII characters, and avoid "&" and spaces in filenames',
    },
    {
      id: "no-overwrites",
      name: "Do not overwrite files",
      flag: "--no-overwrites",
      type: "boolean",
      description: "Do not overwrite files",
    },
    {
      id: "continue",
      name: "Resume partially downloaded files",
      flag: "--continue",
      type: "boolean",
      description: "Force resume of partially downloaded files",
      incompatibleWith: ["no-continue"],
    },
    {
      id: "no-continue",
      name: "Do not resume downloads",
      flag: "--no-continue",
      type: "boolean",
      description: "Do not resume partially downloaded files (restart from beginning)",
      incompatibleWith: ["continue"],
    },
    {
      id: "part",
      name: "Use .part files",
      flag: "--part",
      type: "boolean",
      description: "Use .part files instead of writing directly to output file",
      incompatibleWith: ["no-part"],
    },
    {
      id: "no-part",
      name: "Do not use .part files",
      flag: "--no-part",
      type: "boolean",
      description: "Do not use .part files - write directly to output file",
      incompatibleWith: ["part"],
    },
    {
      id: "mtime",
      name: "Use modification time",
      flag: "--mtime",
      type: "boolean",
      description: "Use the Last-modified header to set the file modification time",
      incompatibleWith: ["no-mtime"],
    },
    {
      id: "no-mtime",
      name: "Do not use modification time",
      flag: "--no-mtime",
      type: "boolean",
      description: "Do not use the Last-modified header to set the file modification time",
      incompatibleWith: ["mtime"],
    },
    {
      id: "write-description",
      name: "Write description",
      flag: "--write-description",
      type: "boolean",
      description: "Write video description to a .description file",
    },
    {
      id: "write-info-json",
      name: "Write info JSON",
      flag: "--write-info-json",
      type: "boolean",
      description: "Write video metadata to a .info.json file",
    },
    {
      id: "write-annotations",
      name: "Write annotations",
      flag: "--write-annotations",
      type: "boolean",
      description: "Write video annotations to a .annotations.xml file",
    },
    {
      id: "load-info-json",
      name: "Load info JSON",
      flag: "--load-info-json",
      type: "string",
      description: "JSON file containing the video information",
      placeholder: "FILE",
      example: "video_info.json",
    },
    {
      id: "cookies",
      name: "Cookies file",
      flag: "--cookies",
      type: "string",
      description: "File to read cookies from and dump cookie jar in",
      placeholder: "FILE",
      example: "cookies.txt",
    },
    {
      id: "cache-dir",
      name: "Cache directory",
      flag: "--cache-dir",
      type: "string",
      description: "Location in the filesystem where yt-dlp can store some downloaded information permanently",
      placeholder: "DIR",
      example: "~/.cache/yt-dlp",
    },
    {
      id: "no-cache-dir",
      name: "Disable cache",
      flag: "--no-cache-dir",
      type: "boolean",
      description: "Disable filesystem caching",
      incompatibleWith: ["rm-cache-dir"],
    },
    {
      id: "rm-cache-dir",
      name: "Remove cache directory",
      flag: "--rm-cache-dir",
      type: "boolean",
      description: "Delete all filesystem cache files",
      incompatibleWith: ["no-cache-dir"],
    },
    {
      id: "batch-file",
      name: "Batch file",
      flag: "-a",
      type: "string",
      description: "File containing URLs to download",
      placeholder: "FILE",
      example: "urls.txt",
    },
    {
      id: "no-batch-file",
      name: "No batch file",
      flag: "--no-batch-file",
      type: "boolean",
      description: "Do not read URLs from batch file (default)",
    },
    {
      id: "paths",
      name: "Download Paths",
      flag: "-P",
      type: "string",
      description: "The paths where the files should be downloaded",
      placeholder: "[TYPES:]PATH",
      example: "home:~/Downloads",
    },
    {
      id: "no-restrict-filenames",
      name: "No restrict filenames",
      flag: "--no-restrict-filenames",
      type: "boolean",
      description: "Allow Unicode characters, \"&\" and spaces in filenames (default)",
      incompatibleWith: ["restrict-filenames"],
    },
    {
      id: "windows-filenames",
      name: "Windows filenames",
      flag: "--windows-filenames",
      type: "boolean",
      description: "Force filenames to be Windows-compatible",
      incompatibleWith: ["no-windows-filenames"],
    },
    {
      id: "no-windows-filenames",
      name: "No Windows filenames",
      flag: "--no-windows-filenames",
      type: "boolean",
      description: "Sanitize filenames only minimally",
      incompatibleWith: ["windows-filenames"],
    },
    {
      id: "trim-filenames",
      name: "Trim filenames",
      flag: "--trim-filenames",
      type: "number",
      description: "Limit the filename length (excluding extension)",
      placeholder: "LENGTH",
      min: 1,
    },
    {
      id: "force-overwrites",
      name: "Force overwrites",
      flag: "--force-overwrites",
      type: "boolean",
      description: "Overwrite all video and metadata files",
      incompatibleWith: ["no-force-overwrites"],
    },
    {
      id: "no-force-overwrites",
      name: "No force overwrites",
      flag: "--no-force-overwrites",
      type: "boolean",
      description: "Do not overwrite the video, but overwrite related files (default)",
      incompatibleWith: ["force-overwrites"],
    },
    {
      id: "no-write-description",
      name: "No write description",
      flag: "--no-write-description",
      type: "boolean",
      description: "Do not write video description (default)",
      incompatibleWith: ["write-description"],
    },
    {
      id: "no-write-info-json",
      name: "No write info JSON",
      flag: "--no-write-info-json",
      type: "boolean",
      description: "Do not write video metadata (default)",
      incompatibleWith: ["write-info-json"],
    },
    {
      id: "write-playlist-metafiles",
      name: "Write playlist metafiles",
      flag: "--write-playlist-metafiles",
      type: "boolean",
      description: "Write playlist metadata in addition to the video metadata (default)",
      incompatibleWith: ["no-write-playlist-metafiles"],
    },
    {
      id: "no-write-playlist-metafiles",
      name: "No write playlist metafiles",
      flag: "--no-write-playlist-metafiles",
      type: "boolean",
      description: "Do not write playlist metadata when using --write-info-json, --write-description etc.",
      incompatibleWith: ["write-playlist-metafiles"],
    },
    {
      id: "clean-info-json",
      name: "Clean info JSON",
      flag: "--clean-info-json",
      type: "boolean",
      description: "Remove some internal metadata such as filenames from the infojson (default)",
      incompatibleWith: ["no-clean-info-json"],
    },
    {
      id: "no-clean-info-json",
      name: "No clean info JSON",
      flag: "--no-clean-info-json",
      type: "boolean",
      description: "Write all fields to the infojson",
      incompatibleWith: ["clean-info-json"],
    },
    {
      id: "write-comments",
      name: "Write comments",
      flag: "--write-comments",
      type: "boolean",
      description: "Retrieve video comments to be placed in the infojson",
      incompatibleWith: ["no-write-comments"],
    },
    {
      id: "no-write-comments",
      name: "No write comments",
      flag: "--no-write-comments",
      type: "boolean",
      description: "Do not retrieve video comments unless the extraction is known to be quick",
      incompatibleWith: ["write-comments"],
    },
    {
      id: "no-cookies",
      name: "No cookies",
      flag: "--no-cookies",
      type: "boolean",
      description: "Do not read/dump cookies from/to file (default)",
      incompatibleWith: ["cookies"],
    },
    {
      id: "no-cookies-from-browser",
      name: "No cookies from browser",
      flag: "--no-cookies-from-browser",
      type: "boolean",
      description: "Do not load cookies from browser (default)",
      incompatibleWith: ["cookies-from-browser"],
    },
    {
      id: "netrc",
      name: "Use .netrc",
      flag: "-n",
      type: "boolean",
      description: "Use .netrc authentication data",
    },
    {
      id: "netrc-location",
      name: "Netrc location",
      flag: "--netrc-location",
      type: "string",
      description: "Location of .netrc authentication data",
      placeholder: "PATH",
      example: "~/.netrc",
    },
    {
      id: "netrc-cmd",
      name: "Netrc command",
      flag: "--netrc-cmd",
      type: "string",
      description: "Command to execute to get the credentials for an extractor",
      placeholder: "NETRC_CMD",
    },
  ],
  ffmpeg: [
    {
      id: "ffmpeg-location",
      name: "FFmpeg location",
      flag: "--ffmpeg-location",
      type: "string",
      description: "Location of the ffmpeg binary",
      placeholder: "PATH",
      example: "/usr/bin/ffmpeg",
    },
    {
      id: "ffmpeg-cmd",
      name: "FFmpeg command",
      flag: "--ffmpeg-cmd",
      type: "string",
      description: "Command to use instead of 'ffmpeg'",
      placeholder: "CMD",
      example: "avconv",
    },
    {
      id: "postprocessor-args",
      name: "Post-processor arguments",
      flag: "--postprocessor-args",
      type: "string",
      description: "Give these arguments to the post-processor",
      placeholder: "ARGS",
      example: "ffmpeg:-v quiet",
    },
    {
      id: "audio-channels",
      name: "Audio channels",
      flag: "--audio-channels",
      type: "string",
      description: "Specify audio channels",
      placeholder: "CHANNELS",
      example: "2",
    },
    {
      id: "audio-codec",
      name: "Audio codec",
      flag: "--audio-codec",
      type: "string",
      description: "Specify ffmpeg audio codec",
      placeholder: "CODEC",
      example: "aac",
    },
    {
      id: "video-codec",
      name: "Video codec",
      flag: "--video-codec",
      type: "string",
      description: "Specify ffmpeg video codec",
      placeholder: "CODEC",
      example: "h264",
    },
    {
      id: "ffmpeg-args",
      name: "FFmpeg arguments",
      flag: "--ffmpeg-args",
      type: "string",
      description: "Additional arguments to pass to ffmpeg",
      placeholder: "ARGS",
      example: "-preset slow -crf 18",
    },
  ],
  thumbnail: [
    {
      id: "convert-thumbnails",
      name: "Convert thumbnails",
      flag: "--convert-thumbnails",
      type: "select",
      description: "Convert thumbnails to another format",
      options: [
        { label: "JPG", value: "jpg" },
        { label: "PNG", value: "png" },
        { label: "WEBP", value: "webp" },
      ],
    },
    {
      id: "list-thumbnails",
      name: "List available thumbnails",
      flag: "--list-thumbnails",
      type: "boolean",
      description: "List all available thumbnails",
      infoCommand: true,
    },
    {
      id: "write-all-thumbnails",
      name: "Write all thumbnails",
      flag: "--write-all-thumbnails",
      type: "boolean",
      description: "Write all thumbnail formats to disk",
    },
  ],
  advanced: [
    {
      id: "verbose",
      name: "Verbose output",
      flag: "--verbose",
      type: "boolean",
      description: "Print various debugging information",
      requiresUrl: false,
    },
    {
      id: "quiet",
      name: "Quiet mode",
      flag: "--quiet",
      type: "boolean",
      description: "Activate quiet mode",
      requiresUrl: false,
      incompatibleWith: ["verbose"],
    },
    {
      id: "no-warnings",
      name: "No warnings",
      flag: "--no-warnings",
      type: "boolean",
      description: "Ignore warnings",
      requiresUrl: false,
    },
    {
      id: "simulate",
      name: "Simulate download",
      flag: "--simulate",
      type: "boolean",
      description: "Do not download the video and do not write anything to disk",
    },
    {
      id: "skip-download",
      name: "Skip download",
      flag: "--skip-download",
      type: "boolean",
      description: "Do not download the video",
    },
    {
      id: "print",
      name: "Print to console",
      flag: "--print",
      type: "string",
      description: "Print the given template to the screen",
      placeholder: "TEMPLATE",
      example: "%(title)s",
    },
    {
      id: "print-to-file",
      name: "Print to file",
      flag: "--print-to-file",
      type: "string",
      description: "Append given template to the file",
      placeholder: "TEMPLATE FILE",
      example: "%(title)s output.txt",
    },
    {
      id: "cookies-from-browser",
      name: "Cookies from browser",
      flag: "--cookies-from-browser",
      type: "string",
      description: "Load cookies from browser",
      placeholder: "BROWSER[+KEYRING][:PROFILE]",
      example: "chrome",
    },
    {
      id: "concurrent-fragments",
      name: "Concurrent fragments",
      flag: "--concurrent-fragments",
      type: "number",
      description: "Number of fragments to download concurrently",
      placeholder: "NUMBER",
      min: 1,
      example: "3",
    },
  ],
  verbosity: [
    {
      id: "no-quiet",
      name: "No quiet mode",
      flag: "--no-quiet",
      type: "boolean",
      description: "Deactivate quiet mode (default)",
      incompatibleWith: ["quiet"],
    },
    {
      id: "no-simulate",
      name: "No simulate",
      flag: "--no-simulate",
      type: "boolean",
      description: "Download the video even if printing/listing options are used",
      incompatibleWith: ["simulate"],
    },
    {
      id: "ignore-no-formats-error",
      name: "Ignore no formats error",
      flag: "--ignore-no-formats-error",
      type: "boolean",
      description: "Ignore 'No video formats' error (experimental)",
      incompatibleWith: ["no-ignore-no-formats-error"],
    },
    {
      id: "no-ignore-no-formats-error",
      name: "No ignore no formats error",
      flag: "--no-ignore-no-formats-error",
      type: "boolean",
      description: "Throw error when no downloadable video formats are found (default)",
      incompatibleWith: ["ignore-no-formats-error"],
    },
    {
      id: "dump-json",
      name: "Dump JSON",
      flag: "-j",
      type: "boolean",
      description: "Print JSON information for each video",
      requiresUrl: false,
      infoCommand: true,
    },
    {
      id: "dump-single-json",
      name: "Dump single JSON",
      flag: "-J",
      type: "boolean",
      description: "Print JSON information for each URL or infojson passed",
      requiresUrl: false,
      infoCommand: true,
    },
    {
      id: "force-write-archive",
      name: "Force write archive",
      flag: "--force-write-archive",
      type: "boolean",
      description: "Force download archive entries to be written",
    },
    {
      id: "newline",
      name: "Newline progress",
      flag: "--newline",
      type: "boolean",
      description: "Output progress bar as new lines",
    },
    {
      id: "no-progress",
      name: "No progress",
      flag: "--no-progress",
      type: "boolean",
      description: "Do not print progress bar",
      incompatibleWith: ["progress"],
    },
    {
      id: "progress",
      name: "Show progress",
      flag: "--progress",
      type: "boolean",
      description: "Show progress bar, even if in quiet mode",
      incompatibleWith: ["no-progress"],
    },
    {
      id: "console-title",
      name: "Console title progress",
      flag: "--console-title",
      type: "boolean",
      description: "Display progress in console titlebar",
    },
    {
      id: "progress-template",
      name: "Progress template",
      flag: "--progress-template",
      type: "string",
      description: "Template for progress outputs",
      placeholder: "[TYPES:]TEMPLATE",
      example: "download-title:%(info.id)s-%(progress.eta)s",
    },
    {
      id: "progress-delta",
      name: "Progress delta",
      flag: "--progress-delta",
      type: "number",
      description: "Time between progress output",
      placeholder: "SECONDS",
      min: 0,
    },
    {
      id: "dump-pages",
      name: "Dump pages",
      flag: "--dump-pages",
      type: "boolean",
      description: "Print downloaded pages encoded using base64",
    },
    {
      id: "write-pages",
      name: "Write pages",
      flag: "--write-pages",
      type: "boolean",
      description: "Write downloaded intermediary pages to files",
    },
    {
      id: "print-traffic",
      name: "Print traffic",
      flag: "--print-traffic",
      type: "boolean",
      description: "Display sent and read HTTP traffic",
    },
  ],
  workarounds: [
    {
      id: "encoding",
      name: "Force encoding",
      flag: "--encoding",
      type: "string",
      description: "Force the specified encoding (experimental)",
      placeholder: "ENCODING",
    },
    {
      id: "legacy-server-connect",
      name: "Legacy server connect",
      flag: "--legacy-server-connect",
      type: "boolean",
      description: "Allow HTTPS connection to servers that don't support secure renegotiation",
    },
    {
      id: "no-check-certificates",
      name: "No check certificates",
      flag: "--no-check-certificates",
      type: "boolean",
      description: "Suppress HTTPS certificate validation",
    },
    {
      id: "prefer-insecure",
      name: "Prefer insecure",
      flag: "--prefer-insecure",
      type: "boolean",
      description: "Use unencrypted connection to retrieve video info (YouTube only)",
    },
    {
      id: "bidi-workaround",
      name: "Bidi workaround",
      flag: "--bidi-workaround",
      type: "boolean",
      description: "Work around terminals that lack bidirectional text support",
    },
    {
      id: "sleep-requests",
      name: "Sleep requests",
      flag: "--sleep-requests",
      type: "number",
      description: "Number of seconds to sleep between requests during data extraction",
      placeholder: "SECONDS",
      min: 0,
    },
    {
      id: "sleep-subtitles",
      name: "Sleep subtitles",
      flag: "--sleep-subtitles",
      type: "number",
      description: "Number of seconds to sleep before each subtitle download",
      placeholder: "SECONDS",
      min: 0,
    },
  ],
  authentication: [
    {
      id: "username",
      name: "Username",
      flag: "-u",
      type: "string",
      description: "Login with this account ID",
      placeholder: "USERNAME",
    },
    {
      id: "password",
      name: "Password",
      flag: "-p",
      type: "string",
      description: "Account password",
      placeholder: "PASSWORD",
    },
    {
      id: "twofactor",
      name: "Two-factor auth",
      flag: "-2",
      type: "string",
      description: "Two-factor authentication code",
      placeholder: "TWOFACTOR",
    },
    {
      id: "video-password",
      name: "Video password",
      flag: "--video-password",
      type: "string",
      description: "Video-specific password",
      placeholder: "PASSWORD",
    },
    {
      id: "ap-mso",
      name: "Adobe Pass MSO",
      flag: "--ap-mso",
      type: "string",
      description: "Adobe Pass multiple-system operator identifier",
      placeholder: "MSO",
    },
    {
      id: "ap-username",
      name: "Adobe Pass username",
      flag: "--ap-username",
      type: "string",
      description: "Multiple-system operator account login",
      placeholder: "USERNAME",
    },
    {
      id: "ap-password",
      name: "Adobe Pass password",
      flag: "--ap-password",
      type: "string",
      description: "Multiple-system operator account password",
      placeholder: "PASSWORD",
    },
    {
      id: "ap-list-mso",
      name: "List Adobe Pass MSOs",
      flag: "--ap-list-mso",
      type: "boolean",
      description: "List all supported multiple-system operators",
      requiresUrl: false,
      infoCommand: true,
    },
    {
      id: "client-certificate",
      name: "Client certificate",
      flag: "--client-certificate",
      type: "string",
      description: "Path to client certificate file",
      placeholder: "CERTFILE",
    },
    {
      id: "client-certificate-key",
      name: "Client certificate key",
      flag: "--client-certificate-key",
      type: "string",
      description: "Path to private key file",
      placeholder: "KEYFILE",
    },
    {
      id: "client-certificate-password",
      name: "Client certificate password",
      flag: "--client-certificate-password",
      type: "string",
      description: "Password for client certificate private key",
      placeholder: "PASSWORD",
    },
  ],
  postProcessing: [
    {
      id: "no-keep-video",
      name: "No keep video",
      flag: "--no-keep-video",
      type: "boolean",
      description: "Delete the intermediate video file after post-processing (default)",
      incompatibleWith: ["keep-video"],
    },
    {
      id: "post-overwrites",
      name: "Post overwrites",
      flag: "--post-overwrites",
      type: "boolean",
      description: "Overwrite post-processed files (default)",
      incompatibleWith: ["no-post-overwrites"],
    },
    {
      id: "no-post-overwrites",
      name: "No post overwrites",
      flag: "--no-post-overwrites",
      type: "boolean",
      description: "Do not overwrite post-processed files",
      incompatibleWith: ["post-overwrites"],
    },
    {
      id: "no-embed-subs",
      name: "No embed subs",
      flag: "--no-embed-subs",
      type: "boolean",
      description: "Do not embed subtitles (default)",
      incompatibleWith: ["embed-subs"],
    },
    {
      id: "no-embed-thumbnail",
      name: "No embed thumbnail",
      flag: "--no-embed-thumbnail",
      type: "boolean",
      description: "Do not embed thumbnail (default)",
      incompatibleWith: ["embed-thumbnail"],
    },
    {
      id: "no-embed-metadata",
      name: "No embed metadata",
      flag: "--no-embed-metadata",
      type: "boolean",
      description: "Do not add metadata to file (default)",
      incompatibleWith: ["embed-metadata"],
    },
    {
      id: "embed-chapters",
      name: "Embed chapters",
      flag: "--embed-chapters",
      type: "boolean",
      description: "Add chapter markers to the video file",
      incompatibleWith: ["no-embed-chapters"],
    },
    {
      id: "no-embed-chapters",
      name: "No embed chapters",
      flag: "--no-embed-chapters",
      type: "boolean",
      description: "Do not add chapter markers (default)",
      incompatibleWith: ["embed-chapters"],
    },
    {
      id: "embed-info-json",
      name: "Embed info JSON",
      flag: "--embed-info-json",
      type: "boolean",
      description: "Embed the infojson as an attachment to mkv/mka video files",
      incompatibleWith: ["no-embed-info-json"],
    },
    {
      id: "no-embed-info-json",
      name: "No embed info JSON",
      flag: "--no-embed-info-json",
      type: "boolean",
      description: "Do not embed the infojson as an attachment to the video file",
      incompatibleWith: ["embed-info-json"],
    },
    {
      id: "parse-metadata",
      name: "Parse metadata",
      flag: "--parse-metadata",
      type: "string",
      description: "Parse additional metadata like title/artist from other fields",
      placeholder: "[WHEN:]FROM:TO",
    },
    {
      id: "replace-in-metadata",
      name: "Replace in metadata",
      flag: "--replace-in-metadata",
      type: "string",
      description: "Replace text in a metadata field using regex",
      placeholder: "[WHEN:]FIELDS REGEX REPLACE",
    },
    {
      id: "xattrs",
      name: "Write xattrs",
      flag: "--xattrs",
      type: "boolean",
      description: "Write metadata to the video file's xattrs",
    },
    {
      id: "concat-playlist",
      name: "Concatenate playlist",
      flag: "--concat-playlist",
      type: "select",
      description: "Concatenate videos in a playlist",
      options: [
        { label: "Never", value: "never" },
        { label: "Always", value: "always" },
        { label: "Multi-video", value: "multi_video" },
      ],
    },
    {
      id: "fixup",
      name: "Fixup policy",
      flag: "--fixup",
      type: "select",
      description: "Automatically correct known faults of the file",
      options: [
        { label: "Never", value: "never" },
        { label: "Warn", value: "warn" },
        { label: "Detect or warn", value: "detect_or_warn" },
        { label: "Force", value: "force" },
      ],
    },
    {
      id: "no-exec",
      name: "No exec",
      flag: "--no-exec",
      type: "boolean",
      description: "Remove any previously defined --exec",
    },
    {
      id: "convert-subs",
      name: "Convert subtitles",
      flag: "--convert-subs",
      type: "string",
      description: "Convert the subtitles to another format",
      placeholder: "FORMAT",
      example: "srt",
    },
    {
      id: "split-chapters",
      name: "Split chapters",
      flag: "--split-chapters",
      type: "boolean",
      description: "Split video into multiple files based on internal chapters",
      incompatibleWith: ["no-split-chapters"],
    },
    {
      id: "no-split-chapters",
      name: "No split chapters",
      flag: "--no-split-chapters",
      type: "boolean",
      description: "Do not split video based on chapters (default)",
      incompatibleWith: ["split-chapters"],
    },
    {
      id: "remove-chapters",
      name: "Remove chapters",
      flag: "--remove-chapters",
      type: "string",
      description: "Remove chapters whose title matches the given regular expression",
      placeholder: "REGEX",
    },
    {
      id: "no-remove-chapters",
      name: "No remove chapters",
      flag: "--no-remove-chapters",
      type: "boolean",
      description: "Do not remove any chapters from the file (default)",
      incompatibleWith: ["remove-chapters"],
    },
    {
      id: "force-keyframes-at-cuts",
      name: "Force keyframes at cuts",
      flag: "--force-keyframes-at-cuts",
      type: "boolean",
      description: "Force keyframes at cuts when downloading/splitting/removing sections",
      incompatibleWith: ["no-force-keyframes-at-cuts"],
    },
    {
      id: "no-force-keyframes-at-cuts",
      name: "No force keyframes at cuts",
      flag: "--no-force-keyframes-at-cuts",
      type: "boolean",
      description: "Do not force keyframes around the chapters when cutting/splitting (default)",
      incompatibleWith: ["force-keyframes-at-cuts"],
    },
    {
      id: "use-postprocessor",
      name: "Use postprocessor",
      flag: "--use-postprocessor",
      type: "string",
      description: "The name of plugin postprocessors to be enabled",
      placeholder: "NAME[:ARGS]",
    },
  ],
  sponsorBlock: [
    {
      id: "sponsorblock-mark",
      name: "SponsorBlock mark",
      flag: "--sponsorblock-mark",
      type: "string",
      description: "SponsorBlock categories to create chapters for",
      placeholder: "CATS",
      example: "all,-preview",
    },
    {
      id: "sponsorblock-remove",
      name: "SponsorBlock remove",
      flag: "--sponsorblock-remove",
      type: "string",
      description: "SponsorBlock categories to be removed from the video file",
      placeholder: "CATS",
      example: "sponsor,intro",
    },
    {
      id: "sponsorblock-chapter-title",
      name: "SponsorBlock chapter title",
      flag: "--sponsorblock-chapter-title",
      type: "string",
      description: "Output template for the title of the SponsorBlock chapters",
      placeholder: "TEMPLATE",
      example: "[SponsorBlock]: %(category_names)l",
    },
    {
      id: "no-sponsorblock",
      name: "No SponsorBlock",
      flag: "--no-sponsorblock",
      type: "boolean",
      description: "Disable both --sponsorblock-mark and --sponsorblock-remove",
    },
    {
      id: "sponsorblock-api",
      name: "SponsorBlock API",
      flag: "--sponsorblock-api",
      type: "string",
      description: "SponsorBlock API location",
      placeholder: "URL",
      example: "https://sponsor.ajay.app",
    },
  ],
  extractor: [
    {
      id: "extractor-retries",
      name: "Extractor retries",
      flag: "--extractor-retries",
      type: "string",
      description: "Number of retries for known extractor errors (default is 3), or \"infinite\"",
      placeholder: "RETRIES",
    },
    {
      id: "allow-dynamic-mpd",
      name: "Allow dynamic MPD",
      flag: "--allow-dynamic-mpd",
      type: "boolean",
      description: "Process dynamic DASH manifests (default)",
      incompatibleWith: ["ignore-dynamic-mpd"],
    },
    {
      id: "ignore-dynamic-mpd",
      name: "Ignore dynamic MPD",
      flag: "--ignore-dynamic-mpd",
      type: "boolean",
      description: "Do not process dynamic DASH manifests",
      incompatibleWith: ["allow-dynamic-mpd"],
    },
    {
      id: "hls-split-discontinuity",
      name: "HLS split discontinuity",
      flag: "--hls-split-discontinuity",
      type: "boolean",
      description: "Split HLS playlists to different formats at discontinuities",
      incompatibleWith: ["no-hls-split-discontinuity"],
    },
    {
      id: "no-hls-split-discontinuity",
      name: "No HLS split discontinuity",
      flag: "--no-hls-split-discontinuity",
      type: "boolean",
      description: "Do not split HLS playlists into different formats at discontinuities (default)",
      incompatibleWith: ["hls-split-discontinuity"],
    },
    {
      id: "extractor-args",
      name: "Extractor arguments",
      flag: "--extractor-args",
      type: "string",
      description: "Pass ARGS arguments to the extractor",
      placeholder: "IE_KEY:ARGS",
    },
  ],
}


